　ＰＯＲＴＡＣＬＥ　ＨＥＬＰ

If you are reading this then you either already successfully figured out how to switch buffers in Portacle, or you're sneaking through the files. Either way, great! This guide is supposed to help you find your way around this IDE, and to serve as a reference sheet in case you forget things. If you're just starting out, reading this all the way through is a good idea, as otherwise you will most likely get horribly confused about how to actually get things done.

　ＴＥＲＭＩＮＯＬＯＧＹ

Before we get started we need to lay down some terms so that we can actually talk about things.

- Buffer
  A buffer is what you are looking at right now. Every buffer has a name, this one is called *portacle-help*. You can see the name of the buffer at the bottom of it, right after the colon. Buffers are basically containers for things, usually text or files, but they can also be interactive in different ways, allowing you to run commands and so forth.
  
- Mode
  Every buffer has something called a major mode, and zero or more minor modes. Modes define what kind of thing the buffer represents, what it looks like, how you can interact with it, what kind of actions are possible, and so forth. In the case of the *portacle-help* buffer, the major mode is Fundamental, and the only minor mode active is My-Keys. You can see the modes listed right next to the buffer name.

- Mode Line
  The thing at the bottom of a buffer where its name is written, the modes are listed, and all sorts of other things are noted is called the mode line. It is responsible for displaying current status information about the buffer it belongs to, most important of which being the buffer name, and the list of modes.

- Frame
  A frame is an operating system window, as in, the thing that displays Portacle and has a menu up top. Frames can be split up into many sections. Each of those sections is, confusingly enough, called a

- Window
  A window is what displays a buffer. Now, the reason this is called a window and a standard "window" is called a frame is due to historical artefacts. Fortunately enough you won't have to deal with frames much, so just remember that a window is the thing that actually displays a buffer, and that you can split Portacle up to display multiple windows at the same time.

- Keychord / Chord
  Portacle has its own way of denoting key press combinations, usually called keychords. We'll go into depth on how those are denoted and how you're supposed to read them later. Just keep in mind that pretty much everything you can do or even might want to do can be done by pressing the right combination of keys-- the right chord.

- Minibuffer
  At the very bottom of Portacle should be a singular, currently empty line. This isn't merely a waste of space, it's where the minibuffer is located. It displays status information and helps you out when need to perform commands or press keychords. You might have already seen it pop up and show things when you switched the buffer to this one for the first time.

- Cursor
  The cursor is the coloured rectangle in the buffer. It indicates where you would be writing or performing any kind of command at the moment. If it is filled and blinking, then it means the buffer it belongs to is currently active. The cursor in inactive buffers is merely an outline.

　ＫＥＹＣＨＯＲＤ　ＮＯＴＡＴＩＯＮ

In order to be able to easily talk about and read keychords we'll have to go through the way they're usually denoted. It's not difficult or convoluted, so don't worry. You'll get the hang of it easily enough.

First, some keys are abbreviated for simplicity. We'll list them here:

- C : Control

- S : Shift

- M : Meta / Command / Alt

- SPC : Space bar

- ESC : Escape

- RET : Return / Enter / ↵

- DEL : Delete

- TAB : Tab

Everything else is either a singular letter, which corresponds to the according letter on your keyboard (with Shift if it should be uppercase), or it is a special key encased in angle brackets. Examples of the latter are <left> for the left arrow key, <home> for the Home key, and so forth.

Next we need to define in which order keys should be pressed. Some keys need to be held at the same time, while others should happen one after the other. If two or more keys should be held down at the same time, they are connected by a hyphen. If they should be pressed one after the other, they are connected by a space, which is omitted if it is simply a word you should type out. Let's look at an example.

  C-x b *scratch* RET

This means the following: Hold Control pressed and press x. Release both. Press b and release it. Type "repl". Press Return.
Before you try it out though, let's look at this one too:

  C-x b *portacle-help* RET

This one is the same as the last, except that instead of typing "repl", you type "*protacle-help*". This is the same keychord as the one you likely used to see this buffer at the very beginning. The other keychord switches the buffer to the REPL (more on that later). You can use these two to switch between the two buffers.

Here's a more complicated, imaginary chord just to see what it would denote:

  C-M-t d M-a <home> C-l RET

Press Control, Meta/Command/Alt, and t at the same time, then press d, then press Meta/Command/Alt and a at the same time, then press the Home key, then press Control and l at the same time, then press Return.

Simple enough, right? We'll use this keychord notation from here on out.

　ＢＡＳＩＣ　ＮＡＶＩＧＡＴＩＯＮ

Let's get through some basic keychords to navigate around in Portacle. Try them out to see for yourself what they do. Seeing it in effect probably explains it much better than I could hope to in words. You don't need to memorise all of the chords that are listed here either, you'll pick up on the ones you need as you go along.

- C-h k
  Help on Keychords. After pressing this chord, you can press another, and a little buffer will pop up telling you what chord you pressed and what it does. If you forget what a chord does, this is a good way to get a quick reminder. You can press q in the help buffer to close it again.

- C-h m
  Help on Modes. After pressing this chord you'll get a large help buffer that lists all the active modes in the current buffer and what kind of chords they provide. Useful if you forget a keychord.

- C-x b
  Buffer switching. You've used this before! After hitting the keychord it will ask you for a the name of a buffer to switch to. It will suggest names in the minibuffer, and you only have to type as much of the name until shows the one you want after your cursor. You can also use the arrow keys to cycle through the suggestions. Once you have the one your want, simply hit RET to switch to it. Usually the one you were on before will be the first suggestion when you're switching again, so you can switch back and forth quite quick with just C-x b RET. You can also specify a buffer name that does not yet exist yet, which will open a new buffer with the given name.

- C-x k
  Kill (close) a buffer. Just like C-x b you get to tell it a buffer name, in this case defaulting to the current one. Hitting RET then performs the actual killing and switches the window to the next buffer in line.

- C-x o
  Other window. Essentially cycles between the open windows.

- C-x 3
  Splits the current window horizontally and places the new window to the right.

- C-x 2
  Splits the current window vertically and places the new window below.

- C-x 1
  Removes all windows but the current one, making it take up all space.

- C-x 0
  Removes the current window.

- C-g
  Usually aborts whatever you started doing. This is very useful if you accidentally started typing a chord you don't actually wanted to start, or are in some other kind of situation that you'd like to get out of.

- C-s
  Search in the current buffer. After hitting C-s you can start typing for the thing you want to look for. Hitting C-s again will jump to the next match. Hitting RET will end the search at the current position. If you press C-g the cursor will jump back to where it started and the search is aborted.

- C-j
  This acts as RET in situations where RET does something different by default. More precisely this means either inserting a newline or being the "yes, I'm absolutely sure I want to confirm" chord.

- C-x C-f
  Open a file in a new buffer. You'll get to navigate to the file you want in the minibuffer. Once you've chosen the file you want, simply press RET to open it if it exists, or C-j to create a new file if it does not yet exist.

- C-x C-s
  Saves the current file to disk. If you've made some changes and would like to save, this is it.

- C-x C-w
  Save the current buffer to a new file on disk. The file choosing works just like in C-x C-f.

- C-x C-v
  Switches the current buffer to a different file. Useful for when the file changed on disk but was not reloaded in Portacle.

- C-c k
  Kills the current buffer and deletes the corresponding file. You'll be asked for a confirmation.

- C-x C-c
  Close Portacle altogether.

- C-SPC
  Start marking a region. If you press C-SPC again, you stop marking. You can also press C-g to abort as usual.

- C-q
  Expands the selected region smartly. This is aware of the current mode and attempts to grow the selected region in an appropriate way for it. This allows you to very quickly select text.

- C-w
  Cuts the currently selected region of text from the buffer and puts it into your clipboard.

- M-w
  Copies the currently selected region of text in the buffer and puts it into your clipboard.

- C-y
  Yanks (pastes) the clipboard contents at your cursor's position.

- C-_
  Undoes your last action. For each consecutive time you press it, it performs one undo. If you press something else after undoing and then start undoing again you'll start undoing your undos after a bit. This way, you never lose any editing step. More succinctly put, the action of undoing is itself recorded and can again be undone.

- C-k
  Kill the rest of the line, which is everything after your cursor.

- Arrow keys
  Move the cursor in the direction you pressed.

- <home>
  Move the cursor to the beginning of the line.

- <end>
  Move the cursor to the end of the line.

- ESC <
  Move to the beginning of the buffer.

- ESC >
  Move to the end of the buffer.

- C-M-<pgup>
  Create a new cursor for the next region matching the currently selected region above your topmost cursor. If nothing is currently selected, it simply creates a cursor on the next line. Pretty much all commands that work with a single cursor also work with multiple ones, including cutting, pasting, etc. Press C-g to get rid of the extra cursors.

- C-M-<pgdn>
  The same as C-M-<pgup>, but going downwards.

- C-M-m a
  Create new cursors for all occurrences of the currently selected region.

- C-x d
  Open a file tree browser on the side. Pressing RET on an entry will expand/contract directories or open the file in a new buffer.

- C-x e
  Close the file tree browser.

- C-M-f
  Jump forward by a token. This should be semantically aware and jump however much is appropriate for the content in your buffer.

- C-M-b
  Jump backward by a token. See C-M-f.

　ＣＯＭＭＯＮ　ＬＩＳＰ　ＩＮＴＥＲＡＣＴＩＯＮ

These commands are specific to lisp buffers. They'll only work in buffers in the lisp major-mode.

- C-c C-c
  Compile the form at point. This will send the form your cursor is on at the moment to the lisp process and compile it.

- C-c C-k
  Compile and load the entire file in this buffer.

- C-c RET
  Macroexpands the expression at the current point once. In the buffer that appears you'll be able to further expand inner expressions by pressing C-c RET on them again. q closes the buffer as usual.

- M-.
  Jump to the definition of the symbol your cursor is currently on. This is extremely useful in order to learn how a system works and how it is implemented. Use it often.

- M-,
  Jump back to your previous location before you hit M-.

- C-<right>
  "Slurp" in the expression on the right. This means that if your cursor is currently within a list and there is an element outside to the right of the list, pressing this will pull the element onto the end of the list.

- C-<left>
  "Barf" the expression at the end. This means that if your cursor is currently within a list and there is an element at the end of it, pressing this will push the element outside the list and put it right after it.

- M-<up>
  Splice the contents upwards. This means that if your cursor is currently within a list, pressing this will delete everything from the beginning of the list up to the cursor and remove the list surrounding the remaining elements.

- M-?
  "Convolute" the surrounding expressions. This means that the current list and its parent switch positions. For example, convoluting (a (b c) d) with the cursor after the b will produce (b (a c d)), whereas if the cursor is after the c, it will produce (b c (a d)).

- M-;
  Un/comment out the marked region.

The following shortcuts are useful in the REPL.

- C-<up>
  Insert the previous REPL command from your history.

- C-<down>
  Insert the next REPL command from your history.

- C-c C-c
  Interrupt the current execution.

- ,restart RET
  Restart your lisp process.

The following shortcuts are useful in the SLDB debugger.

- a
  Choose the topmost ABORT restart

- c
  Choose the topmost CONTINUE restart

- 0-9
  Choose the restart corresponding to the number you pressed.

- q
  Choose the lowermost ABORT restart

- v
  With the cursor on a stack frame, show the definition of the function and highlight the region in which the error occurred.

- r
  With the cursor on a stack frame, restart the selected frame.

- e
  With the cursor on a stack frame, evaluate an expression in the frame.

　ＣＵＳＴＯＭＩＳＩＮＧ



　ＦＵＲＴＨＥＲ　ＲＥＡＤＩＮＧ ＆　ＲＥＳＯＵＲＣＥＳ

- Practical Common Lisp <http://www.gigamonkeys.com/book/>
  An introduction to common lisp using practical projects. Requires some prior knowledge and experience with programming.

- Lisp Works Hyperspec <http://www.lispworks.com/documentation/HyperSpec/Front/index.htm>
  The CLHS is the primary source for when you're wondering what a function, type, variable, anything in CL is supposed to do.

- L1sp.org <http://l1sp.org/html/>
  Conveniently earch the CLHS by term.

- Cliki <http://www.cliki.net/index>
  The Common Lisp wiki contains various information about common lisp projects.

- MORE STUFF
